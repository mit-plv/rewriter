# name: CI (Coq)

# on:
#   push:
#     branches: [ master ]
#   pull_request:
#   merge_group:
#   workflow_dispatch:
#   release:
#     types: [published]
#   schedule:
#     - cron: '0 0 1 * *'

# jobs:
#   build:

#     strategy:
#       fail-fast: false
#       matrix:
#         env:
#          - { COQ_VERSION: "8.18.0", COQ_PACKAGE: "coq-8.18.0 libcoq-8.18.0-ocaml-dev", SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-11" }
#          - { COQ_VERSION: "8.17.1", COQ_PACKAGE: "coq-8.17.1 libcoq-8.17.1-ocaml-dev", SKIP_VALIDATE: "" , PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-11" }

#     env: ${{ matrix.env }}
#     runs-on: ubuntu-latest

#     concurrency:
#       group: ${{ github.workflow }}-${{ matrix.env.COQ_VERSION }}-${{ github.head_ref || github.run_id }}
#       cancel-in-progress: true

#     steps:
#     - name: install Coq
#       run: |
#         if [ ! -z "$PPA" ]; then sudo add-apt-repository "$PPA" -y; fi
#         sudo apt-get -o Acquire::Retries=30 update -q
#         sudo apt-get -o Acquire::Retries=30 install ocaml-findlib $COQ_PACKAGE -y --allow-unauthenticated
#     - uses: actions/checkout@v4
#       with:
#         submodules: recursive
#     - name: echo build params
#       run: etc/ci/describe-system-config.sh
#     - name: all
#       run: etc/ci/github-actions-make.sh ${EXTRA_GH_REPORTIFY} -j2 all
#     - name: perf-Sanity
#       run: etc/ci/github-actions-make.sh ${EXTRA_GH_REPORTIFY} -j2 perf-Sanity
#     - name: display timing info
#       run: cat time-of-build-pretty.log
#     - name: display per-line timing info
#       run: etc/ci/github-actions-display-per-line-timing.sh
# #    - name: upload timing and .vo info
# #      uses: actions/upload-artifact@v1
# #      with:
# #        name: build-outputs-${{ matrix.env.COQ_VERSION }}
# #        path: .
# #      if: always ()
#     - name: validate
#       run: make TIMED=1 validate COQCHKFLAGS="-o"
#       if: matrix.env.SKIP_VALIDATE == '' && github.event_name != 'pull_request'

#   check-all:
#     runs-on: ubuntu-latest
#     needs: build
#     if: always()
#     steps:
#     - run: echo 'The triggering workflow passed'
#       if: ${{ needs.build.result == 'success' }}
#     - run: echo 'The triggering workflow failed' && false
#       if: ${{ needs.build.result != 'success' }}
