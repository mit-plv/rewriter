open Ltac_plugin
open Tacexpr
open Constr
open EConstr
open Genredexpr
open Names
open Locus
open Inductive_from_elim
open Definition_by_tactic


(*let r_scraped_data_ty () = Coqlib.lib_ref "rewriter.scraped_data.type"*)
let r_scraped_data_with_args () = Coqlib.lib_ref "rewriter.scraped_data_with_args.type"
let r_base_elim_with_args () = Coqlib.lib_ref "rewriter.base_elim_with_args.type"
let r_ident_elim_with_args () = Coqlib.lib_ref "rewriter.ident_elim_with_args.type"
let r_pattern_ident_elim_with_args () = Coqlib.lib_ref "rewriter.pattern_ident_elim_with_args.type"
let r_raw_ident_elim_with_args () = Coqlib.lib_ref "rewriter.raw_ident_elim_with_args.type"
let r_verified_rewriter_with_args () = Coqlib.lib_ref "rewriter.verified_rewriter_with_args.type"
let r_ident_list_nil () = Coqlib.lib_ref "rewriter.ident_list.nil"
let r_rules_proofs_with_args () = Coqlib.lib_ref "rewriter.rules_proofs_with_args.type"
let r_true () = Coqlib.lib_ref "core.bool.true"
let r_false () = Coqlib.lib_ref "core.bool.false"

let rewriter_path =
  DirPath.make (List.map Id.of_string ["RewriterBuildRegistry";"plugins";"Util";"Rewriter"])

(* taken from https://github.com/coq/coq/blob/b6dcb301a1a34df8e4586e8cde6618e7c895fa08/plugins/setoid_ring/newring.ml#L161-L163 *)
(* Calling a global tactic *)
let ltac_call tac (args:glob_tactic_arg list) =
  CAst.make @@ TacArg(TacCall (CAst.make (ArgArg(Loc.tag @@ tac),args)))

let tactic_of_name (name : string) : unit Proofview.tactic =
  try
    Tacinterp.eval_tactic (ltac_call (KerName.make (ModPath.MPfile rewriter_path) (Label.make name)) [])
  with Not_found -> CErrors.user_err Pp.(str "Not_found while trying to eval tactic " ++ str name)

let base_elim_with_args_tac = tactic_of_name "make_base_elim_with_args"
let ident_elim_with_args_tac = tactic_of_name "make_ident_elim_with_args"
let pattern_ident_elim_with_args_tac = tactic_of_name "make_pattern_ident_elim_with_args"
let raw_ident_elim_with_args_tac = tactic_of_name "make_raw_ident_elim_with_args"
let scraped_data_with_args_tac = tactic_of_name "make_scraped_data_with_args"
let verified_rewriter_with_args_tac = tactic_of_name "make_verified_rewriter_with_args"
let rules_proofs_with_args_tac = tactic_of_name "make_rules_proofs_with_args"

let name_or name default_name =
  match name with
  | Some name -> name
  | None -> Namegen.next_global_ident_away (Names.Id.of_string default_name) Id.Set.empty

let rec projT2_skip_cast env sigma c =
  match EConstr.kind sigma c with
  | Cast (c, _, _) -> projT2_skip_cast env sigma c
  | App (_existT, [|_tA; _tP; _proj1; proj2|]) -> proj2
  | App (_, args) ->
    CErrors.user_err Pp.(str "Not an existT: Incorrect number of arguments (" ++ int (Array.length args) ++ str "): " ++ Printer.pr_econstr_env env sigma c)
  | _ -> CErrors.user_err Pp.(str "Not an existT: " ++ Printer.pr_econstr_env env sigma c)


let rewriter_heuristic_process_rules_proofs env sigma ~poly rules_proofs =
  let (sigma, rules_proofs_ty) = Typing.type_of env sigma rules_proofs in
  let (sigma, rules_proofs_with_args) = Evd.fresh_global env sigma (r_rules_proofs_with_args ()) in
  let rules_proofs_with_args = mkApp (rules_proofs_with_args, [|rules_proofs_ty; rules_proofs|]) in
  let uctx = Evd.evar_universe_context sigma in
  let (rules_proofs_sig, _maybe_type, _univs, _uses_unsafe_tactic, uctx) =
    Declare.build_by_tactic env ~uctx ~poly ~typ:rules_proofs_with_args rules_proofs_with_args_tac in
  let sigma = Evd.from_ctx uctx in (* XXX IS THIS RIGHT? *)
  let rules_proofs_sig = EConstr.of_constr rules_proofs_sig in
  (sigma, projT2_skip_cast env sigma rules_proofs_sig)

let rules_ty_of_rules_proofs env sigma rules_proofs =
  let (sigma, rules_proofs_ty) = Typing.type_of env sigma rules_proofs in
  match EConstr.kind sigma rules_proofs_ty with
  | App (_hlist, [|_A; _snd; rules_ty|]) -> rules_ty
  | App (_, args)
    -> CErrors.user_err Pp.(str "Invalid type for rules_proofs: Incorrect number of arguments (" ++ int (Array.length args) ++ str "): " ++ Printer.pr_econstr_env env sigma rules_proofs_ty)
  | _ -> CErrors.user_err Pp.(str "Invalid type for rules_proofs: " ++ Printer.pr_econstr_env env sigma rules_proofs_ty)


let rewriter_scrape_data env sigma ~poly (rules_proofs : EConstr.t) (extra : EConstr.t) =
  let (sigma, scraped_data_with_args) = Evd.fresh_global env sigma (r_scraped_data_with_args ()) in
  let rules_ty = rules_ty_of_rules_proofs env sigma rules_proofs in
  let (sigma, extra_ty) = Typing.type_of env sigma extra in
  let scraped_data_ty = mkApp (scraped_data_with_args, [|rules_ty; rules_proofs; extra_ty; extra|]) in
  let uctx = Evd.evar_universe_context sigma in
  let (scraped_data, _maybe_type, _univs, _uses_unsafe_tactic, uctx) =
    Declare.build_by_tactic env ~uctx ~poly ~typ:scraped_data_ty scraped_data_with_args_tac in
  let sigma = Evd.from_ctx uctx in (* XXX IS THIS RIGHT? *)
  (sigma, EConstr.of_constr scraped_data)

let rewriter_emit_inductives sigma ~poly (scraped_data : EConstr.t) (base_name : Names.Id.t option) (ident_name : Names.Id.t option) (raw_ident_name : Names.Id.t option) (pattern_ident_name : Names.Id.t option) =
  let env = Global.env () in
  let (hnffun, _) = Redexpr.reduction_of_red_expr env Hnf in
  let (sigma, scraped_data) = hnffun env sigma scraped_data in
  let (sigma, base_elim_with_args) = Evd.fresh_global env sigma (r_base_elim_with_args ()) in
  let base_elim_ty = mkApp (base_elim_with_args, [|scraped_data|]) in
  let (sigma, ident_elim_with_args) = Evd.fresh_global env sigma (r_ident_elim_with_args ()) in
  let (sigma, pattern_ident_elim_with_args) = Evd.fresh_global env sigma (r_pattern_ident_elim_with_args ()) in
  let (sigma, raw_ident_elim_with_args) = Evd.fresh_global env sigma (r_raw_ident_elim_with_args ()) in
  let uctx = Evd.evar_universe_context sigma in
  let (base_elim, _maybe_type, _univs, _uses_unsafe_tactic, uctx) =
    Declare.build_by_tactic env ~uctx ~poly ~typ:base_elim_ty base_elim_with_args_tac in
  let sigma = Evd.from_ctx uctx in (* XXX IS THIS RIGHT? *)
  let base_name = name_or base_name "base" in
  let (sigma, base) = make_inductive_from_elim sigma (Some base_name) (EConstr.of_constr base_elim) in
  let base = mkInd base in
  let ident_elim_ty = mkApp (ident_elim_with_args, [|scraped_data;base|]) in
  let pattern_ident_elim_ty = mkApp (pattern_ident_elim_with_args, [|scraped_data;base|]) in
  let raw_ident_elim_ty = mkApp (raw_ident_elim_with_args, [|scraped_data;base|]) in
  let uctx = Evd.evar_universe_context sigma in
  let (ident_elim, _maybe_type, _univs, _uses_unsafe_tactic, uctx) =
    Declare.build_by_tactic env ~uctx ~poly ~typ:ident_elim_ty ident_elim_with_args_tac in
  let (pattern_ident_elim, _maybe_type, _univs, _uses_unsafe_tactic, uctx) =
    Declare.build_by_tactic env ~uctx ~poly ~typ:pattern_ident_elim_ty pattern_ident_elim_with_args_tac in
  let (raw_ident_elim, _maybe_type, _univs, _uses_unsafe_tactic, uctx) =
    Declare.build_by_tactic env ~uctx ~poly ~typ:raw_ident_elim_ty raw_ident_elim_with_args_tac in
  let sigma = Evd.from_ctx uctx in (* XXX IS THIS RIGHT? *)
  let ident_name = name_or ident_name "ident" in
  let (sigma, ident) = make_inductive_from_elim sigma (Some ident_name) (EConstr.of_constr ident_elim) in
  let pattern_ident_name = name_or pattern_ident_name "pattern_ident" in
  let (sigma, pattern_ident) = make_inductive_from_elim sigma (Some pattern_ident_name) (EConstr.of_constr pattern_ident_elim) in
  let raw_ident_name = name_or raw_ident_name "raw_ident" in
  let (sigma, raw_ident) = make_inductive_from_elim sigma (Some raw_ident_name) (EConstr.of_constr raw_ident_elim) in
  (sigma, (base, mkInd ident, mkInd raw_ident, mkInd pattern_ident))

let head sigma c =
  match EConstr.kind sigma c with
  | App (f, _) -> f
  | _ -> c

let set_strategy_of_package sigma level verified_rewriter_package =
  let env = Global.env () in
  let (hnffun, _) = Redexpr.reduction_of_red_expr env Hnf in
  let (sigma, verified_rewriter_package) = hnffun env sigma verified_rewriter_package in
  let exprInfo = match EConstr.kind sigma verified_rewriter_package with
    | App (_build, args) -> args.(0)
    | _ -> CErrors.user_err Pp.(str "Invalid hnf of verified rewriter package: " ++ Printer.pr_econstr_env env sigma verified_rewriter_package)
  in
  match EConstr.kind sigma exprInfo with
  | App (_build, [|base; ident; base_interp; ident_interp|]) ->
    let local = false in
    let evaluable_head v = Tacred.evaluable_of_global_reference env (Patternops.head_of_constr_reference sigma (head sigma v)) in
    Redexpr.set_strategy local
      [(Conv_oracle.Level level,
        List.map evaluable_head [base_interp; ident_interp])];
    sigma
  | App (_, args) ->
    CErrors.user_err Pp.(str "Invalid hnf of exprInfo: Incorrect number of arguments (" ++ int (Array.length args) ++ str "): " ++ Printer.pr_econstr_env env sigma exprInfo)
  | _ ->
    CErrors.user_err Pp.(str "Invalid hnf of exprInfo: " ++ Printer.pr_econstr_env env sigma exprInfo)

let make_rewriter_of_scraped_and_ind sigma ~poly package_name scraped_data var_like_idents base ident raw_ident pattern_ident include_interp skip_early_reduction skip_early_reduction_no_dtree rules_proofs =
  let env = Global.env () in
  let (sigma, verified_rewriter_with_args) = Evd.fresh_global env sigma (r_verified_rewriter_with_args ()) in
  let rules_ty = rules_ty_of_rules_proofs env sigma rules_proofs in
  let verified_rewriter_ty = mkApp (verified_rewriter_with_args, [|scraped_data; var_like_idents; base; ident; raw_ident; pattern_ident; include_interp; skip_early_reduction; skip_early_reduction_no_dtree; rules_ty; rules_proofs|]) in
  (* force a typecheck of the application, propogate universe constraints *)
  let (sigma, _) = Typing.type_of env sigma verified_rewriter_ty in
  (* add universe constraints to the global env *)
  let _ = Evd.univ_entry ~poly sigma in
  let verified_rewriter_name = make_definition_by_tactic sigma ~poly package_name verified_rewriter_ty verified_rewriter_with_args_tac in
  let sigma = Evd.from_env (Global.env ()) in
  let verified_rewriter = mkConst verified_rewriter_name in
  let sigma = set_strategy_of_package sigma (-1000) verified_rewriter in
  (sigma, verified_rewriter)

let make_rewriter sigma ~poly ~var_like_idents ~include_interp ~skip_early_reduction ~skip_early_reduction_no_dtree ~extra (package_name : Names.Id.t) (rules_proofs : EConstr.t) =
  let env = Global.env () in
  let (sigma, include_interp) = Evd.fresh_global env sigma (if include_interp then r_true () else r_false ()) in
  let (sigma, skip_early_reduction) = Evd.fresh_global env sigma (if skip_early_reduction then r_true () else r_false ()) in
  let (sigma, skip_early_reduction_no_dtree) = Evd.fresh_global env sigma (if skip_early_reduction_no_dtree then r_true () else r_false ()) in
  let (sigma, rules_proofs) = rewriter_heuristic_process_rules_proofs env sigma ~poly rules_proofs in
  let (sigma, scraped_data) = rewriter_scrape_data env sigma ~poly rules_proofs extra in
  let (sigma, (base, ident, raw_ident, pattern_ident)) = rewriter_emit_inductives sigma ~poly scraped_data None None None None in
  let (sigma, rewriter) = make_rewriter_of_scraped_and_ind sigma ~poly package_name scraped_data var_like_idents base ident raw_ident pattern_ident include_interp skip_early_reduction skip_early_reduction_no_dtree rules_proofs in
  (sigma, rewriter)

let vernac_rewriter_emit_inductives ~poly (scraped_data : Constrexpr.constr_expr) (base : Names.Id.t) (ident : Names.Id.t) (raw_ident : Names.Id.t) (pattern_ident : Names.Id.t) =
  let env = Global.env () in
  let sigma = Evd.from_env env in
  let (sigma, scraped_data) = Constrintern.interp_constr_evars env sigma scraped_data in
  ignore(rewriter_emit_inductives sigma ~poly scraped_data (Some base) (Some ident) (Some raw_ident) (Some pattern_ident))


let vernac_make_rewriter ~poly ?(var_like_idents = None) ?(include_interp = false) ?(skip_early_reduction = false) ?(skip_early_reduction_no_dtree = true) ?(extra = None) (package_name : Names.Id.t) (rules_proofs : Constrexpr.constr_expr) =
  let env = Global.env () in
  let sigma = Evd.from_env env in
  let (sigma, var_like_idents) = match var_like_idents with
    | Some v -> Constrintern.interp_constr_evars env sigma v
    | None -> Evd.fresh_global env sigma (r_ident_list_nil ())
  in
  let (sigma, extra) = match extra with
    | Some v -> Constrintern.interp_constr_evars env sigma v
    | None -> Evd.fresh_global env sigma (r_false ()) (* can be any well-typed term; all subterms get added to the identifiers of the reified language *)
  in
  let (sigma, rules_proofs) = Constrintern.interp_constr_evars env sigma rules_proofs in
  ignore(make_rewriter sigma package_name rules_proofs ~poly ~var_like_idents ~include_interp ~skip_early_reduction ~skip_early_reduction_no_dtree ~extra)
